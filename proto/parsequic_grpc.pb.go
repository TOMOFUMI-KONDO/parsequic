// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParseQuicClient is the client API for ParseQuic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParseQuicClient interface {
	Parse(ctx context.Context, in *ParseQuicRequest, opts ...grpc.CallOption) (ParseQuic_ParseClient, error)
}

type parseQuicClient struct {
	cc grpc.ClientConnInterface
}

func NewParseQuicClient(cc grpc.ClientConnInterface) ParseQuicClient {
	return &parseQuicClient{cc}
}

func (c *parseQuicClient) Parse(ctx context.Context, in *ParseQuicRequest, opts ...grpc.CallOption) (ParseQuic_ParseClient, error) {
	stream, err := c.cc.NewStream(ctx, &ParseQuic_ServiceDesc.Streams[0], "/proto.ParseQuic/Parse", opts...)
	if err != nil {
		return nil, err
	}
	x := &parseQuicParseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ParseQuic_ParseClient interface {
	Recv() (*ParseQuicReply, error)
	grpc.ClientStream
}

type parseQuicParseClient struct {
	grpc.ClientStream
}

func (x *parseQuicParseClient) Recv() (*ParseQuicReply, error) {
	m := new(ParseQuicReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ParseQuicServer is the server API for ParseQuic service.
// All implementations must embed UnimplementedParseQuicServer
// for forward compatibility
type ParseQuicServer interface {
	Parse(*ParseQuicRequest, ParseQuic_ParseServer) error
	mustEmbedUnimplementedParseQuicServer()
}

// UnimplementedParseQuicServer must be embedded to have forward compatible implementations.
type UnimplementedParseQuicServer struct {
}

func (UnimplementedParseQuicServer) Parse(*ParseQuicRequest, ParseQuic_ParseServer) error {
	return status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (UnimplementedParseQuicServer) mustEmbedUnimplementedParseQuicServer() {}

// UnsafeParseQuicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParseQuicServer will
// result in compilation errors.
type UnsafeParseQuicServer interface {
	mustEmbedUnimplementedParseQuicServer()
}

func RegisterParseQuicServer(s grpc.ServiceRegistrar, srv ParseQuicServer) {
	s.RegisterService(&ParseQuic_ServiceDesc, srv)
}

func _ParseQuic_Parse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ParseQuicRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ParseQuicServer).Parse(m, &parseQuicParseServer{stream})
}

type ParseQuic_ParseServer interface {
	Send(*ParseQuicReply) error
	grpc.ServerStream
}

type parseQuicParseServer struct {
	grpc.ServerStream
}

func (x *parseQuicParseServer) Send(m *ParseQuicReply) error {
	return x.ServerStream.SendMsg(m)
}

// ParseQuic_ServiceDesc is the grpc.ServiceDesc for ParseQuic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParseQuic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ParseQuic",
	HandlerType: (*ParseQuicServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Parse",
			Handler:       _ParseQuic_Parse_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/parsequic.proto",
}
